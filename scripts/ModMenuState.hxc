import funkin.graphics.FunkinCamera;
import funkin.graphics.FunkinSprite;
import funkin.graphics.shaders.GaussianBlurShader;
import funkin.input.Cursor;
import funkin.modding.base.ScriptedMusicBeatSubState;
import funkin.modding.PolymodHandler;
import funkin.util.FileUtilSandboxed;
import funkin.util.ReflectUtil;
import funkin.util.WindowUtil;

import flixel.FlxG;
import flixel.graphics.frames.FlxImageFrame;
import flixel.text.FlxText;
import flixel.text.FlxTextBorderStyle;

import polymod.ModMetadata;

import openfl.display.BitmapData;
import openfl.filters.ShaderFilter;
import openfl.utils.ByteArrayData;

import haxe.ds.StringMap;
import haxe.ui.RuntimeComponentBuilder;
import haxe.ui.components.Button;
import haxe.ui.components.Image;
import haxe.ui.components.Label;
import haxe.ui.components.Link;
import haxe.ui.components.Spacer;
import haxe.ui.components.Switch;
import haxe.ui.containers.ListView;
import haxe.ui.containers.ScrollView;
import haxe.ui.containers.VBox;
import haxe.ui.core.ItemRenderer;
import haxe.ui.data.ArrayDataSource;
import haxe.ui.events.MouseEvent;
import haxe.ui.events.UIEvent;
import haxe.ui.layouts.HorizontalLayout;

import StringTools;

class ModMenuState extends ScriptedMusicBeatSubState {
    var changedMod:Bool = false;
    var enabledMods:Array<ModMetadata>;
    var disabledMods:Array<String> = [];
    var cachedMeta:ModMetadata;
    var modMenuCam:FunkinCamera;

    var menuTitle:FlxText = new FlxText();
    var modTitle:Label = new Label();
    var modsSizeTxt:Label = new Label();
    var iconSprite:FunkinSprite = new FunkinSprite();
    var modsListView:ListView = new ListView();
    var modInfoView:ScrollView = new ScrollView();
    var itemRenderer:ItemRenderer = new ItemRenderer();
    var modInfoContainer:VBox = new VBox();

    var buttons:Array<Button> = [];
    var homepageBtn:Button;
    var issuesBtn:Button;
    var modsDirBtn:Button;
    var backButton:Button;
    var modDirBtn:Button;
    var configBtn:Button;

    var folderIcon:FunkinSprite = FunkinSprite.create(0, 0, "modmenu/ui/folder-icon");

    var prevPersUpd:Bool;
    var prevCursor:Bool;

    override function create() {
        super.create();

        prevCursor = FlxG.mouse.visible;
        prevPersUpd = FlxG.state.persistentUpdate;
        FlxG.state.persistentUpdate = false;

        enabledMods = PolymodHandler.getAllMods();
        disabledMods = FileUtilSandboxed.readDir("mods").filter(id -> !PolymodHandler.getAllModIds().contains(id));

        folderIcon.setGraphicSize(35, 35);

        setupCamera();
        setupUI();
        setupButtons();
        setupEventHandlers();

        Cursor.show();
    }

    override function update(elapsed:Float) {
        super.update(elapsed);

        if (controls.BACK) { close(); cleanup(); }
    }

    // Helper methods
    function setupCamera() {
        FlxG.state.camera.filters = [new ShaderFilter(new GaussianBlurShader(1))];
        modMenuCam = new FunkinCamera("modMenuCam");
        modMenuCam.bgColor = 0x5F000000;
        FlxG.cameras.add(modMenuCam, false);
    }

    function setupUI() {
        var handlerWindow = RuntimeComponentBuilder.fromAsset(Paths.ui("base-style"));
        if (handlerWindow == null) return;

        // Setup list view
        modsListView.camera = modMenuCam;
        modsListView.backgroundColor = 0x000000;
        modsListView.setPosition(50, 125);
        modsListView.setSize(575, 525);
        modsListView.customStyle.backgroundOpacity = 0.4;

        itemRenderer.customStyle.backgroundOpacity = 0.1;
        itemRenderer.percentWidth = 100;
        itemRenderer.layout = new HorizontalLayout();

        itemRenderer.addComponent(createComponent("Image", {id: "icon", width: 70, height: 70}));
        itemRenderer.addComponent(createComponent("Label", {id: "text", fontSize: 19, percentWidth: 100, verticalAlign: "top", paddingTop: 5}));
        itemRenderer.addComponent(createComponent("Switch", {id: "enableSwitch", horizontalAlign: "right"}));

        modsListView.itemRenderer = itemRenderer;
        populateModList(modsListView);
        add(modsListView);

        // Setup info view
        modInfoView.camera = modMenuCam;
        modInfoView.backgroundColor = 0x000000;
        modInfoView.customStyle.backgroundOpacity = 0.5;
        modInfoView.x = 650;
        modInfoView.y = 225;
        modInfoView.width = 575;
        modInfoView.height = 425;
        add(modInfoView);

        // Setup title
        menuTitle.setFormat(Paths.font("Tardling.ttf"), 21, 0xFFFFFF, "center", FlxTextBorderStyle.OUTLINE_FAST, 0xFF111111);
        menuTitle.borderSize = 0.75;
        menuTitle.text = "Mods";
        menuTitle.x = modsListView.x + modsListView.width * 0.5 - menuTitle.width * 0.5;
        menuTitle.y = 16;
        menuTitle.camera = modMenuCam;
        add(menuTitle);

        // Setup size text
        modsSizeTxt.text = "Showing " + enabledMods.length + " mods";
        modsSizeTxt.fontSize = 19;
        modsSizeTxt.x = modsListView.x + 10;
        modsSizeTxt.y = modsListView.y - 30;
        add(modsSizeTxt);

        // Setup icon
        iconSprite.x = modInfoView.x;
        iconSprite.y = modInfoView.y - 165;
        iconSprite.visible = false;
        iconSprite.camera = modMenuCam;
        add(iconSprite);

        // Setup mod title
        modTitle.fontSize = 19;
        modTitle.x = iconSprite.x + 110;
        modTitle.y = iconSprite.y + 5;
        add(modTitle);

        // Setup mod info container
        modInfoContainer.x = 10;
        modInfoContainer.y = 10;
        modInfoContainer.width = modInfoView.width - 20;
        modInfoContainer.padding = 10;
        modInfoView.addComponent(modInfoContainer);
    }

    function createComponent(type:String, props:Dynamic):Dynamic {
        var comp = switch (type) {
            case "Image": new Image();
            case "Label": new Label();
            case "Switch": new Switch();
            default: null;
        }
        for (field in ReflectUtil.getFieldsOf(props)) ReflectUtil.setProperty(comp, field, ReflectUtil.getAnonymousField(props, field));
        return comp;
    }

    function setupButtons() {
        // Button configurations
        var buttonConfigs = [
            {name: "modDirBtn", text: "", x: modInfoView.x + modInfoView.width - 48, y: modInfoView.y - 105, width: 48, height: 48, disabled: true,
                onClick: () -> FileUtilSandboxed.openFolder("mods/" + modDirBtn.userData)},
            {name: "configBtn", text: "Cfg", x: modInfoView.x + modInfoView.width - 116, y: modInfoView.y - 105, width: 48, height: 48, disabled: true,
                onClick: () -> trace("Not implemented yet")},
            {name: "homepageBtn", text: "Homepage", x: iconSprite.x + 10, y: modInfoView.y - 50, width: Std.int(modInfoView.width * 0.5 - 30), height: 35, fontSize: 16, disabled: true,
                onClick: () -> WindowUtil.openURL(homepageBtn.userData)},
            {name: "issuesBtn", text: "Issues", x: iconSprite.x + Std.int(modInfoView.width * 0.5) + 20, y: modInfoView.y - 50, width: Std.int(modInfoView.width * 0.5 - 30), height: 35, fontSize: 16, disabled: true,
                onClick: () -> WindowUtil.openURL(issuesBtn.userData)},
            {name: "modsDirBtn", text: "Open Mods Folder", x: modsListView.x + modsListView.width - Std.int(modInfoView.width * 0.5 - 30) + 5, y: modsListView.y + modsListView.height + 20, width: Std.int(modInfoView.width * 0.5 - 30), height: 35, fontSize: 16,
                onClick: () -> FileUtilSandboxed.openFolder("mods")},
            {name: "backButton", text: "Exit Menu", x: modsListView.x + modsListView.width + 20, y: modsListView.y + modsListView.height + 20, width: Std.int(modInfoView.width * 0.5 - 30), height: 35, fontSize: 16,
                onClick: () -> close()}
        ];

        // Create buttons from config
        for (config in buttonConfigs) {
            var btn = new Button();
            btn.text = config.text;
            btn.x = config.x;
            btn.y = config.y;
            btn.width = config.width;
            btn.height = config.height;
            if (config.fontSize != null) btn.fontSize = config.fontSize;
            if (config.disabled != null) btn.disabled = config.disabled;
            btn.onClick = (event:MouseEvent) -> config.onClick();
            btn.camera = modMenuCam;

            switch (config.name) {
                case "modDirBtn": modDirBtn = btn;
                case "configBtn": configBtn = btn;
                case "homepageBtn": homepageBtn = btn;
                case "issuesBtn": issuesBtn = btn;
                case "modsDirBtn": modsDirBtn = btn;
                case "backButton": backButton = btn;
            }

            buttons.push(btn);
            add(btn);
        }

        modDirBtn.add(folderIcon);
    }

    function setupEventHandlers() {
        modsListView.onChange = (event:UIEvent) -> {
            if (modsListView.selectedItem.type == "disabled") updateDisModInfo(modInfoView, disabledMods[modsListView.selectedItem.index]);
            else updateModInfo(modInfoView, enabledMods[event.target.value]);
        }
        modDirBtn.onMouseOver = (event:MouseEvent) -> folderIcon.setColorTransform(1, 1, 1, 1, 255, 255, 255);
        modDirBtn.onMouseOut = (event:MouseEvent) -> folderIcon.setColorTransform(1, 1, 1, 1, 0, 0, 0);
    }

    function populateModList(list:ListView) {
        if (list.dataSource == null) list.dataSource = new ArrayDataSource();
        list.dataSource.clear();

        for (i in 0...enabledMods.length) {
            var mod = enabledMods[i];
            list.dataSource.add({
                icon: { resource: FlxImageFrame.fromImage(getModIcon(mod)).frame },
                text: { text: mod.title },
                enableSwitch: { horizontalAlign: "right", verticalAlign: "center", selected: true, styleNames: "pill-switch",
                    onClick: (event:MouseEvent) -> toggleMod(mod.modPath, event.target.value)
                }
            });
        }

        for (i in 0...disabledMods.length) {
            var modId = disabledMods[i];
            var bitmap;
            if (FileUtilSandboxed.fileExists("mods/" + modId + "/_polymod_icon.png")) bitmap = BitmapData.fromFile("mods/" + modId + "/_polymod_icon.png");
            else {
                var defaultPath = FlxG.random.bool(5) ? "flixel/images/logo/default.png" : Paths.image("modmenu/default_icon");
                bitmap = Assets.getBitmapData(defaultPath);
            }
            var frame = FlxImageFrame.fromImage(bitmap).frame;

            list.dataSource.add({
                index: i,
                type: "disabled",
                icon: { resource: frame, width: 70, height: 70 },
                text: { text: modId, fontSize: 19, verticalAlign: "top", paddingTop: 5 },
                enableSwitch: { horizontalAlign: "right", verticalAlign: "center", selected: false, styleNames: "pill-switch",
                    onClick: (event:MouseEvent) -> toggleMod("mods/" + modId, event.target.value)
                }
            });
        }
    }

    function updateModInfo(infoView:ScrollView, modMeta:ModMetadata) {
        if (cachedMeta == modMeta) return;
        cachedMeta = modMeta;

        var bitmap = getModIcon(modMeta);
        iconSprite.loadBitmapData(bitmap);
        iconSprite.setGraphicSize(100, 100);
        iconSprite.updateHitbox();
        iconSprite.visible = true;

        modTitle.text = modMeta.title;
        updateButton(homepageBtn, modMeta.homepage);
        updateButton(issuesBtn, modMeta.metadata.get("issues"));

        modDirBtn.disabled = false;
        modDirBtn.userData = modMeta.id;

        modInfoContainer.removeAllComponents();

        // Description
        if (modMeta.description != null && modMeta.description != "") {
            addLabel(modMeta.description);
            addSpacer();
        }

        // Extra Links
        if (modMeta.metadata.exists("extraLinks")) {
            var extraLinks = modMeta.metadata.get("extraLinks");
            if (extraLinks != null && extraLinks != "") {
                addLabel("Extra Links:", true);

                // Convert string to map
                var linksMap = new StringMap();
                var cleanString = extraLinks.substring(1, extraLinks.length - 1); // Remove brackets
                var pairs = cleanString.split(",");

                for (pair in pairs) {
                    var parts = StringTools.trim(pair).split(" => ");
                    if (parts.length == 2) linksMap.set(StringTools.trim(parts[0]), StringTools.trim(parts[1]));
                }

                // Use the map
                for (key in linksMap.keys()) {
                    var link = new Link();
                    link.text = " " + key;
                    link.fontSize = 16;
                    link.onClick = (event:MouseEvent) -> WindowUtil.openURL(linksMap.get(key));
                    modInfoContainer.addComponent(link);
                }

                addSpacer();
            }
        }

        // Contributors
        if (modMeta.contributors != null && modMeta.contributors.length > 0) {
            addLabel("Credits:", true);

            for (contributor in modMeta.contributors) {
                var nameText = " " + contributor.name;
                if (contributor.role != null && contributor.role != "") {
                    nameText += " - " + contributor.role;
                }

                if (contributor.url != null && contributor.url != "") {
                    var link = new Link();
                    link.text = nameText;
                    link.fontSize = 16;
                    link.onClick = (event:MouseEvent) -> WindowUtil.openURL(contributor.url);
                    modInfoContainer.addComponent(link);
                } else {
                    addLabel(nameText);
                }
            }
        }

        // Fallback
        if (modInfoContainer.numComponents == 0) addLabel("No description available for this mod.");
    }

    function updateDisModInfo(infoView:ScrollView, modId:String) {
        cachedMeta = null;
        var bitmap;
        var bitmap = FileUtilSandboxed.fileExists("mods/" + modId + "/_polymod_icon.png")
        ? BitmapData.fromFile("mods/" + modId + "/_polymod_icon.png")
        : Assets.getBitmapData(FlxG.random.bool(5) ? "flixel/images/logo/default.png" : Paths.image("modmenu/default_icon"));

        iconSprite.loadBitmapData(bitmap);
        iconSprite.setGraphicSize(100, 100);
        iconSprite.updateHitbox();
        iconSprite.visible = true;

        modDirBtn.userData = modId;
        modTitle.text = modId;
        updateButton(issuesBtn, null);
        updateButton(homepageBtn, null);

        modInfoContainer.removeAllComponents();
        addLabel("This mod is disabled !");
    }

    function toggleMod(basePath:String, enable:Bool) {
        var normalFile = basePath + "/_polymod_meta.json";
        var disabledFile = basePath + "/_polymod_meta_disabled.json";

        if (enable) FileUtilSandboxed.rename(disabledFile, "_polymod_meta.json");
        else FileUtilSandboxed.rename(normalFile, "_polymod_meta_disabled.json");

        changedMod = true;
    }

    function addLabel(text:String, bold:Bool = false):Label {
        var label = new Label();
        label.text = text;
        label.fontSize = 16;
        label.wordWrap = true;
        label.width = modInfoContainer.width - 20;
        if (bold) label.customStyle.fontBold = true;
        modInfoContainer.addComponent(label);
        return label;
    }

    function addSpacer() {
        var spacer = new Spacer();
        spacer.height = 15;
        modInfoContainer.addComponent(spacer);
    }

    function updateButton(btn:Button, url:String) {
        btn.disabled = (url == null || url == "");
        if (!btn.disabled) btn.userData = url;
    }

    function getModIcon(mod:ModMetadata):BitmapData {
        if (mod.icon != null) return BitmapData.fromBytes(ByteArrayData.fromBytes(mod.icon));
        return Assets.getBitmapData(FlxG.random.bool(5) ? "flixel/images/logo/default.png" : Paths.image("modmenu/default_icon"));
    }

    // Cleanup stuff
    override function close() {
        if (changedMod) PolymodHandler.forceReloadAssets();
        cleanup();
        super.close();
    }

    override function destroy() {
        cleanup();
        super.destroy();
    }

    function cleanup() {
        if (modMenuCam != null) FlxG.cameras.remove(modMenuCam);
        if (FlxG.state.camera.filters != null) FlxG.state.camera.filters.remove(FlxG.state.camera.filters[FlxG.state.camera.filters.length - 1]);
        FlxG.state.persistentUpdate = prevPersUpd;
        if (prevCursor == false) Cursor.hide();
    }
}