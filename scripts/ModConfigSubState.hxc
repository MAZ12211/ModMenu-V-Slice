import funkin.graphics.FunkinCamera;
import funkin.graphics.shaders.GaussianBlurShader;
import funkin.modding.base.ScriptedMusicBeatSubState;
import funkin.util.FileUtilSandboxed;

import flixel.FlxG;

import openfl.filters.ShaderFilter;

import haxe.ds.StringMap;
import haxe.ui.RuntimeComponentBuilder;

class ModConfigSubState extends ScriptedMusicBeatSubState {
    var mapsTools:MapsTools = new MapsTools();
    var jsonCfg:JsonConfig;

    var configValues:StringMap<String>;
    var configCam:FunkinCamera;

    function new(config:String) {
        super();
        configValues = mapsTools.stringToStringMap(config);
    }

    override function create() {
        super.create();
        if (!configValues.keys().hasNext()) trace("Mod config is empty, please add one !");
        for (cfg in configValues.keyValueIterator()) {
            switch (cfg.key) {
                case "json": handleJsonConfig(cfg.value);
                case "funkin": handleFunkConfig(cfg.value);
                default: close();
            }
        }

        setupCamera();
        setupUI();
    }

    override function update(elapsed:Float) {
        super.update(elapsed);

        if (controls.BACK) { close(); }
    }

    // Setup methods
    function setupCamera() {
        FlxG.state.camera.filters = [new ShaderFilter(new GaussianBlurShader(1))];
        configCam = new FunkinCamera("configCam");
        configCam.bgColor = 0x5F000000;
        FlxG.cameras.add(configCam, false);
    }

    function setupUI() {
        var configMenuUI = RuntimeComponentBuilder.fromAsset(Paths.ui("mod-menu/config-ui"));
        if (configMenuUI == null) return;
    }

    // Handler methods
    function handleJsonConfig(path:String) {
        trace(path);
        trace("JSON CONFIG DETECTED!");
        jsonCfg = new JsonConfig();
        jsonCfg.setFilePath(path);

        trace(jsonCfg.getConfig());
    }

    function handleFunkConfig(value:String) {
        trace("FUNKIN CONFIG DETECTED!");
    }

    // Cleanup stuff
    override function close() {
        cleanup();
        super.close();
    }

    function cleanup() {
        if (configCam != null) FlxG.cameras.remove(configCam);
        if (FlxG.state.camera.filters != null) FlxG.state.camera.filters.remove(FlxG.state.camera.filters[FlxG.state.camera.filters.length - 1]);
    }
}