import funkin.graphics.FunkinCamera;
import funkin.graphics.shaders.GaussianBlurShader;
import funkin.modding.base.ScriptedMusicBeatSubState;
import funkin.util.FileUtilSandboxed;

import flixel.FlxG;

import openfl.filters.ShaderFilter;

import haxe.ds.StringMap;
import haxe.ui.RuntimeComponentBuilder;
import haxe.ui.components.Button;
import haxe.ui.components.Label;
import haxe.ui.containers.ScrollView;
import haxe.ui.events.MouseEvent;
import funkin.input.Cursor;

class ModConfigSubState extends ScriptedMusicBeatSubState {
    var mapsTools:MapsTools = new MapsTools();
    var jsonCfg:JsonConfig;

    var configValues:StringMap<String>;
    var modid:String;
    var configCam:FunkinCamera = new FunkinCamera("configCam");

    var configTitle:Label = new Label();
    var configView:ScrollView = new ScrollView();

    var buttons:Array<Button> = [];
    var backButton:Button = new Button();

    var prevPersUpd:Bool;

    function new(config:Configuration) {
        super();
        configValues = mapsTools.stringToStringMap(config.configName);
        modid = config.modid;
    }

    override function create() {
        super.create();

        prevPersUpd = FlxG.state.persistentUpdate;
        FlxG.state.persistentUpdate = false;

        if (!configValues.keys().hasNext()) trace("Mod config is empty, please add one !");

        for (cfg in configValues.keyValueIterator()) {
            switch (cfg.key) {
                case "json": handleJsonConfig(cfg.value);
                case "funkin": handleFunkConfig(cfg.value);
                default: close();
            }
        }

        setupCamera();
        setupUI();

        Cursor.show();
    }

    override function update(elapsed:Float) {
        super.update(elapsed);

        if (controls.BACK) switchSubState(ScriptedMusicBeatSubState.init("ModMenuSubState"));
    }

    // Setup methods
    function setupCamera() {
        FlxG.state.camera.filters = [new ShaderFilter(new GaussianBlurShader(1))];
        configCam.bgColor = 0x5F000000;
        FlxG.cameras.add(configCam, false);
    }

    function setupUI() {
        var configMenuUI = RuntimeComponentBuilder.build(Paths.ui("mod-menu/config-ui"));
        if (configMenuUI == null) return;
        configMenuUI.camera = configCam;

        configTitle.camera = configCam;
        configTitle.addClass("configTitle");
        configTitle.text = modid + " Config";
        configTitle.top = 25;
        add(configTitle);

        configView.id = "configView";
        configView.camera = configCam;
        configView.percentWidth = 100;
        configView.top = 70;
        configView.percentHeight = 80;
        add(configView);

        backButton.id = "configButton";
        backButton.camera = configCam;
        backButton.text = "Exit Config";
        backButton.top = configView.top + 600;
        backButton.left = (FlxG.width - 257) * 0.5;
        backButton.onClick = (event:MouseEvent) -> switchSubState(ScriptedMusicBeatSubState.init("ModMenuSubState"));
        add(backButton);
    }

    // Handler methods
    function handleJsonConfig(path:String) {
        trace(path);
        trace("JSON CONFIG DETECTED!");
        jsonCfg = new JsonConfig();
        jsonCfg.setFilePath(path);

        trace(jsonCfg.getConfig());
    }

    function handleFunkConfig(value:String) {
        trace("FUNKIN CONFIG DETECTED!");
    }

    // Cleanup stuff
    override function close() {
        cleanup();
        super.close();
    }

    function cleanup() {
        if (configCam != null) FlxG.cameras.remove(configCam);
        FlxG.state.persistentUpdate = prevPersUpd;
        if (FlxG.state.camera.filters != null) FlxG.state.camera.filters.remove(FlxG.state.camera.filters[FlxG.state.camera.filters.length - 1]);
    }
}