import funkin.graphics.FunkinCamera;
import funkin.graphics.FunkinSprite;
import funkin.graphics.shaders.GaussianBlurShader;
import funkin.input.Cursor;
import funkin.modding.base.ScriptedMusicBeatSubState;
import funkin.modding.PolymodHandler;
import funkin.util.FileUtilSandboxed;
import funkin.util.ReflectUtil;
import funkin.util.SerializerUtil;
import funkin.util.VersionUtil;
import funkin.util.WindowUtil;

import flixel.FlxG;
import flixel.FlxSubState;
import flixel.graphics.frames.FlxImageFrame;

import polymod.ModMetadata;

import openfl.display.BitmapData;
import openfl.filters.ShaderFilter;
import openfl.utils.ByteArrayData;

import haxe.ds.StringMap;
import haxe.ui.RuntimeComponentBuilder;
import haxe.ui.components.Button;
import haxe.ui.components.Image;
import haxe.ui.components.Label;
import haxe.ui.components.Link;
import haxe.ui.components.Spacer;
import haxe.ui.components.Switch;
import haxe.ui.components.TextField;
import haxe.ui.containers.HBox;
import haxe.ui.containers.ListView;
import haxe.ui.containers.ScrollView;
import haxe.ui.containers.VBox;
import haxe.ui.core.ItemRenderer;
import haxe.ui.data.ArrayDataSource;
import haxe.ui.events.MouseEvent;
import haxe.ui.events.UIEvent;
import haxe.ui.layouts.HorizontalLayout;

import Array;
import StringTools;
import funkin.util.Constants;
import funkin.ui.options.OptionsState;
import funkin.ui.credits.CreditsState;

class ModMenuSubState extends ScriptedMusicBeatSubState {
    var mapsTools:MapsTools = new MapsTools();

    var enabledMods:Array<ModMetadata>;
    var disabledMods:Array<String> = [];
    var totalMods:Int;
    var modStates:StringMap<Bool> = new StringMap();
    var cachedMeta:ModMetadata;
    var modMenuCam:FunkinCamera = new FunkinCamera("modMenuCam");
    var currentSearchFilter:String = "";
    var lastFilteredCount:Int = -1;
    var configuration:String;

    var modsBox:HBox = new HBox();
    var modsTxt:Label = new Label();
    var disModsTxt:Label = new Label();

    var menuTitle:Label = new Label();
    var modTitle:Label = new Label();
    var modSearch:TextField = new TextField();
    var modInfo:Label = new Label();
    var iconSprite:Image = new Image();
    var modsListView:ListView = new ListView();
    var modInfoView:ScrollView = new ScrollView();
    var itemRenderer:ItemRenderer = new ItemRenderer();
    var modInfoContainer:VBox = new VBox();

    var buttons:Array<Button> = [];
    var homepageBtn:Button;
    var issuesBtn:Button;
    var modsDirBtn:Button;
    var backButton:Button;
    var modDirBtn:Button;
    var configBtn:Button;

    var folderIcon:FunkinSprite = FunkinSprite.create(0, 0, "modmenu/ui/folder-icon");
    var configIcon:FunkinSprite = FunkinSprite.create(0, 0, "modmenu/ui/config-icon");

    var prevPersUpd:Bool;
    var prevCursor:Bool;

    override function create() {
        super.create();

        prevCursor = FlxG.mouse.visible;
        prevPersUpd = FlxG.state.persistentUpdate;
        FlxG.state.persistentUpdate = false;

        enabledMods = PolymodHandler.getAllMods();
        disabledMods = FileUtilSandboxed.readDir("mods").filter(id -> !PolymodHandler.loadedModIds.contains(id));
        totalMods = enabledMods.length + disabledMods.length;

        folderIcon.setGraphicSize(35, 35);
        configIcon.setGraphicSize(35, 35);

        setupCamera();
        setupUI();
        setupButtons();
        setupEventHandlers();

        Cursor.show();
    }

    override function update(elapsed:Float) {
        super.update(elapsed);

        //if (controls.BACK) { close(); }
    }

    // Setup methods
    function setupCamera() {
        FlxG.state.camera.filters = [new ShaderFilter(new GaussianBlurShader(1))];
        modMenuCam.bgColor = 0x5F000000;
        FlxG.cameras.add(modMenuCam, false);
    }

    function setupUI() {
        var handlerWindow = RuntimeComponentBuilder.fromAsset(Paths.ui("base-style"));
        if (handlerWindow == null) return;
        var mainMenuUI = RuntimeComponentBuilder.fromAsset(Paths.ui("mod-menu/menu-ui"));
        if (mainMenuUI == null) return;
        mainMenuUI.camera = modMenuCam;

        // Setup list view
        modsListView.camera = modMenuCam;
        modsListView.id = "modListView";
        modsListView.addClass("modMenuView");
        modsListView.left = 50;
        modsListView.top = 125;
        modsListView.setSize(575, 525);

        itemRenderer.id = "modItemRenderer";
        itemRenderer.layout = new HorizontalLayout();

        itemRenderer.addComponent(createComponent("Image", { id: "icon" }));

        var textContainer = new VBox();
        textContainer.percentWidth = 100;

        var titleContainer = new HBox();
        titleContainer.id = "titleContainer";
        titleContainer.percentWidth = 100;
        titleContainer.addComponent(createComponent("Label", { id: "text" }));
        textContainer.addComponent(titleContainer);

        var tagContainer:VBox = new VBox();
        tagContainer.id = "tagContainer";
        tagContainer.addComponent(createComponent("Label", { id: "tag" }));
        titleContainer.addComponent(tagContainer);

        textContainer.addComponent(createComponent("Label", {id: "summary" }));
        itemRenderer.addComponent(textContainer);
        itemRenderer.addComponent(createComponent("Switch", { id: "enableSwitch", styleNames: "pill-switch" }));

        modsListView.itemRenderer = itemRenderer;
        populateModList(modsListView);
        add(modsListView);

        // Setup info view
        modInfoView.id = "modInfoView";
        modInfoView.styleNames = "modMenuView";
        modInfoView.camera = modMenuCam;
        modInfoView.left = 650;
        modInfoView.top = 225;
        modInfoView.setSize(575, 425);
        add(modInfoView);

        // Setup title
        menuTitle = mainMenuUI.findComponent("menuTitle", Label);
        menuTitle.camera = modMenuCam;
        menuTitle.left = modsListView.left + modsListView.width * 0.45;
        add(menuTitle);

        // Setup search field
        modSearch.id = "modSearch";
        modSearch.camera = modMenuCam;
        modSearch.placeholder = "Search...";
        modSearch.width = modsListView.width * 0.8;
        modSearch.height = 30;
        modSearch.left = modsListView.left + modsListView.width * 0.5 - modSearch.width * 0.5;
        modSearch.top = menuTitle.top + modSearch.height + 15;
        add(modSearch);

        // Setup size text
        modsTxt.addClass("modSizeText");
        modsTxt.text = "Showing " + totalMods + " mods";
        modsTxt.styleNames = "type-enabled";
        modsBox.left = modsListView.left + 10;
        modsBox.camera = modMenuCam;
        modsBox.top = modsListView.top - 30;
        modsBox.addComponent(modsTxt);
        if (disabledMods.length > 0) {
            disModsTxt.addClass("modSizeText");
            disModsTxt.text = " (+" + disabledMods.length + " disabled)";
            disModsTxt.styleNames = "type-disabled";
            modsBox.addComponent(disModsTxt);
        }
        add(modsBox);

        // Setup icon
        iconSprite.camera = modMenuCam;
        iconSprite.addClass("modIcon");
        iconSprite.left = modInfoView.left;
        iconSprite.top = modInfoView.top - 165;
        iconSprite.visible = false;
        add(iconSprite);

        // Setup mod title and info
        modTitle.addClass("titleLabel");
        modTitle.camera = modMenuCam;
        modTitle.left = iconSprite.left + 110;
        modTitle.top = iconSprite.top + 5;
        add(modTitle);

        modInfo.addClass("infoLabel");
        modInfo.camera = modMenuCam;
        modInfo.left = modTitle.left;
        modInfo.top = modTitle.top + 25;
        add(modInfo);

        // Setup mod info container
        modInfoContainer.styleNames = "modInfoContainer";
        modInfoView.addComponent(modInfoContainer);
    }

    function setupButtons() {
        // Button configurations
        var buttonConfigs = [
            {name: "modDirBtn", id: "sqButton", text: "", left: modInfoView.left + modInfoView.width - 48, top: modInfoView.top - 105, disabled: true,
                onClick: () -> FileUtilSandboxed.openFolder(modDirBtn.userData)},
            {name: "configBtn", id: "sqButton", text: "", left: modInfoView.left + modInfoView.width - 116, top: modInfoView.top - 105, disabled: true,
                onClick: () -> {
                    if (configBtn.userData == "funkin") FlxG.switchState(new OptionsState());
                    else this.openSubState(ScriptedMusicBeatSubState.init("ModConfigSubState", configuration));
                }
            },
            {name: "homepageBtn", id: "menuButton", text: "Homepage", left: iconSprite.left + 10, top: modInfoView.top - 50, disabled: true,
                onClick: () -> WindowUtil.openURL(homepageBtn.userData)},
            {name: "issuesBtn", id: "menuButton", text: "Issues", left: iconSprite.left + Std.int(modInfoView.width * 0.5) + 20, top: modInfoView.top - 50, disabled: true,
                onClick: () -> WindowUtil.openURL(issuesBtn.userData)},
            {name: "modsDirBtn", id: "menuButton", text: "Open Mods Folder", left: modsListView.left + modsListView.width - Std.int(modInfoView.width * 0.5 - 30) + 5, top: modsListView.top + modsListView.height + 20,
                onClick: () -> FileUtilSandboxed.openFolder("mods")},
            {name: "backButton", id: "menuButton", text: "Exit Menu", left: modsListView.left + modsListView.width + 20, top: modsListView.top + modsListView.height + 20,
                onClick: () -> close()}
        ];

        // Create buttons from config
        for (config in buttonConfigs) {
            var btn = new Button();
            btn.id = config.id;
            btn.camera = modMenuCam;
            btn.text = config.text;
            btn.left = config.left;
            btn.top = config.top;
            if (config.disabled != null) btn.disabled = config.disabled;
            btn.onClick = (event:MouseEvent) -> config.onClick();

            switch (config.name) {
                case "modDirBtn": modDirBtn = btn;
                case "configBtn": configBtn = btn;
                case "homepageBtn": homepageBtn = btn;
                case "issuesBtn": issuesBtn = btn;
                case "modsDirBtn": modsDirBtn = btn;
                case "backButton": backButton = btn;
            }

            buttons.push(btn);
            add(btn);
        }

        modDirBtn.add(folderIcon);
        configBtn.add(configIcon);
    }

    function setupEventHandlers() {
        modsListView.onChange = (event:UIEvent) -> {
            var selectedItem = modsListView.selectedItem;
            if (selectedItem.type == "disabled")
                updateModInfo(modInfoView, FileUtilSandboxed.readJSONFromPath("mods/" + disabledMods[selectedItem.originalIndex] + "/_polymod_meta_disabled.json"), true);
            else if (selectedItem.type == "enabled")
                updateModInfo(modInfoView, enabledMods[selectedItem.originalIndex], false);
            else if (selectedItem.type == "funkin")
                updateFunkinInfo(modInfoView);
        }
        modDirBtn.onMouseOver = (event:MouseEvent) -> folderIcon.setColorTransform(1, 1, 1, 1, 255, 255, 255);
        modDirBtn.onMouseOut = (event:MouseEvent) -> folderIcon.setColorTransform(1, 1, 1, 1, 0, 0, 0);
        configBtn.onMouseOver = (event:MouseEvent) -> configIcon.setColorTransform(1, 1, 1, 1, 255, 255, 255);
        configBtn.onMouseOut = (event:MouseEvent) -> configIcon.setColorTransform(1, 1, 1, 1, 0, 0, 0);
        modSearch.onDblClick = (event:MouseEvent) -> modSearch.text = "";
        modSearch.onChange = (event:UIEvent) -> {
            var searchText = event.target.text;
            var newFilteredCount = getFilteredModCount(searchText);
            if (newFilteredCount != lastFilteredCount || searchText != currentSearchFilter) {
                currentSearchFilter = searchText;
                lastFilteredCount = newFilteredCount;

                if (searchText == "") {
                    modsListView.dataSource.clearFilter();
                } else {
                    applySearchFilter(modsListView, searchText);
                }
            }

            updateModsSizeText(searchText);
        }
    }

    // Helper methods
    function createComponent(type:String, props:Dynamic):Dynamic {
        var comp = switch (type) {
            case "Image": new Image();
            case "Label": new Label();
            case "Switch": new Switch();
            default: null;
        }
        for (field in ReflectUtil.getFieldsOf(props)) ReflectUtil.setProperty(comp, field, ReflectUtil.getAnonymousField(props, field));
        return comp;
    }

    function populateModList(list:ListView) {
        if (list.dataSource == null) list.dataSource = new ArrayDataSource();
        list.dataSource.clear();

        list.dataSource.add({
            originalIndex: -1,
            type: "funkin",
            modId: "Funkin",
            tagContainer: { backgroundColor: "#F7339A", borderColor: "#FFFFFF", borderSize: 1.5 },
            tag: { text: "V-Slice" },
            icon: { resource: FlxImageFrame.fromImage(BitmapData.fromFile(Assets.getPath("images/modmenu/funkin_icon.png"))).frame, opacity: 1 },
            text: { text: "Friday Night Funkin'", styleNames: "type-enabled" },
            summary: { text: "The base funkin' game." },
            enableSwitch: { disabled: true, opacity: 0 }
        });

        for (i in 0...enabledMods.length) {
            var mod = enabledMods[i];
            var iconResource = FlxImageFrame.fromImage(getModIcon(mod)).frame;
            var tagArray = [];
            if (mod.metadata.exists("tag")) {
                var tagProp = mod.metadata.get("tag");
                var cleanString = tagProp.substring(1, tagProp.length - 1);
                tagArray = cleanString.split(",").map(s -> StringTools.trim(s));
            }
            var tagCont = tagArray.length > 1 ? { backgroundColor: tagArray[1], borderColor: tagArray[2], borderSize: 1.5 } : { };

            list.dataSource.add({
                originalIndex: i,
                type: "enabled",
                modId: mod.id,
                tagContainer: tagCont,
                tag: { text: tagArray[0] ?? "" },
                icon: { resource: iconResource, opacity: 1 },
                text: { text: mod.title, styleNames: "type-enabled" },
                summary: { text: mod.metadata.get("summary") ?? "" },
                enableSwitch: { selected: true,
                    onClick: (event:MouseEvent) -> toggleMod(mod, event.target.value, false)
                }
            });
        }

        for (i in 0...disabledMods.length) {
            var modId = disabledMods[i];
            var iconBitmap:BitmapData;
            if (FileUtilSandboxed.fileExists("mods/" + modId + "/_polymod_icon.png"))
                iconBitmap = BitmapData.fromFile("mods/" + modId + "/_polymod_icon.png");
            else {
                var defaultPath = FlxG.random.bool(5) ? "flixel/images/logo/default.png" : Paths.image("modmenu/default_icon");
                iconBitmap = Assets.getBitmapData(defaultPath);
            }
            var iconResource = FlxImageFrame.fromImage(iconBitmap).frame;

            list.dataSource.add({
                originalIndex: i,
                type: "disabled",
                modId: modId,
                tag: { text: "Disabled" },
                icon: { resource: iconResource, opacity: 0.3 },
                text: { text: modId, styleNames: "type-disabled" },
                summary: { text: "" },
                enableSwitch: { selected: false,
                    onClick: (event:MouseEvent) -> toggleMod(disabledMods[i], event.target.value, true)
                }
            });
        }
    }

    function updateModInfo(infoView:ScrollView, modMeta:ModMetadata, disabled:Bool) {
        if (cachedMeta == modMeta) return;
        cachedMeta = modMeta;

        iconSprite.value = FlxImageFrame.fromImage(getModIcon(modMeta, disabled)).frame;
        iconSprite.visible = true;

        modTitle.text = modMeta.title;

        var version = !disabled ? SerializerUtil.serializeVersion(modMeta.modVersion) : "Disabled";
        modInfo.text = version;
        updateButton(homepageBtn, modMeta.homepage);
        updateButton(issuesBtn, !disabled ? modMeta.metadata.get("issues") : modMeta.metadata?.issues);

        modDirBtn.disabled = false;
        modDirBtn.userData = "mods/" + modMeta.id;

        configBtn.userData = "";
        configuration = disabled ? null : modMeta.metadata.get("config");
        if (!disabled && configuration == null && FileUtilSandboxed.fileExists("config/" + modMeta.id + ".json")) configuration = "[json => config/" + modMeta.id + "]";
        configBtn.disabled = (configuration == null);

        modInfoContainer.removeAllComponents();

        // Description
        if (modMeta.description != null && modMeta.description != "") {
            addLabel(modMeta.description);
            addSpacer();
        }

        // License
        if (modMeta.license != null && modMeta.license != "") {
            addLabel("License:");
            addLabel(" " + modMeta.license);
            addSpacer();
        }

        // Extra Links
        if (disabled) {
            var extraLinks = modMeta.metadata?.extraLinks;
            if (modMeta?.metadata?.extraLinks != null) {
                if (extraLinks != null && extraLinks != "") {
                    addLabel("Extra Links:");

                    for (fieldName in ReflectUtil.getFieldsOf(extraLinks)) {
                        var url = ReflectUtil.getProperty(extraLinks, fieldName);
                        if (url != null && url != "") {
                            var link = new Link();
                            link.styleNames = "modInfoLink";
                            link.text = " " + fieldName;
                            link.onClick = (event:MouseEvent) -> WindowUtil.openURL(url);
                            modInfoContainer.addComponent(link);
                        }
                    }

                    addSpacer();
                }
            }
        } else {
            if (modMeta.metadata.exists("extraLinks")) {
                var extraLinks = modMeta.metadata.get("extraLinks");
                if (extraLinks != null && extraLinks != "") {
                    addLabel("Extra Links:");

                    // Convert string to map
                    var linksMap = mapsTools.stringToStringMap(extraLinks);

                    // Use the map
                    for (key in linksMap.keys()) {
                        var link = new Link();
                        link.styleNames = "modInfoLink";
                        link.text = " " + key;
                        link.onClick = (event:MouseEvent) -> WindowUtil.openURL(linksMap.get(key));
                        modInfoContainer.addComponent(link);
                    }

                    addSpacer();
                }
            }
        }

        // Credits
        if (modMeta.contributors != null && modMeta.contributors.length > 0) {
            addLabel("Credits:");

            for (contributor in modMeta.contributors) {
                var nameText = " " + contributor.name;
                if (contributor.role != null && contributor.role != "") {
                    nameText += " - " + contributor.role;
                }

                if (contributor.url != null && contributor.url != "") {
                    var link = new Link();
                    link.styleNames = "modInfoLink";
                    link.text = nameText;
                    link.onClick = (event:MouseEvent) -> WindowUtil.openURL(contributor.url);
                    modInfoContainer.addComponent(link);
                } else {
                    addLabel(nameText);
                }
            }
        }

        // Fallback
        if (modInfoContainer.numComponents == 0) addLabel("No description available for this mod.");
    }

    function updateFunkinInfo(infoView:ScrollView) {
        cachedMeta = null;

        iconSprite.value = FlxImageFrame.fromImage(BitmapData.fromFile(Assets.getPath("images/modmenu/funkin_icon.png"))).frame;
        iconSprite.visible = true;

        modTitle.text = "Friday Night Funkin'";

        modInfo.text = Constants.VERSION;
        updateButton(homepageBtn, "https://ninja-muffin24.itch.io/funkin");
        updateButton(issuesBtn, "https://github.com/FunkinCrew/Funkin/issues");

        modDirBtn.disabled = false;
        modDirBtn.userData = "";

        configBtn.userData = "funkin";
        configBtn.disabled = false;

        modInfoContainer.removeAllComponents();

        // Description
        addLabel("The base game.");
        addSpacer();

        // License
        addLabel("License:");
        addLabel(" " + "Apache 2.0");
        addSpacer();

        // Credits
        addLabel("Credits:");
        var link = new Link();
        link.styleNames = "modInfoLink";
        link.text = " " + "View Credits";
        link.onClick = (event:MouseEvent) -> FlxG.switchState(new CreditsState());
        modInfoContainer.addComponent(link);
    }

    function toggleMod(modMeta:ModMetadata, enable:Bool, disabled:Bool) {
        var modId = disabled ? modMeta : modMeta.id;

        modStates.set(modId, enable);
        var removeState:Bool = !enable == disabled;
        if (removeState) modStates.remove(modId);

        if (disabled) {
            modMeta = FileUtilSandboxed.readJSONFromPath("mods/" + modId + "/_polymod_meta_disabled.json");
            handleDependencies(modMeta, removeState);
        } else {
            if (modMeta.dependencies != null) handleDependents(modId, removeState);
        }
    }

    function addLabel(text:String):Label {
        var label = new Label();
        label.styleNames = "modInfo";
        label.text = text;
        modInfoContainer.addComponent(label);
        return label;
    }

    function addSpacer() {
        var spacer = new Spacer();
        spacer.height = 15;
        modInfoContainer.addComponent(spacer);
    }

    function getModIcon(mod:ModMetadata, disabled:Bool = false):BitmapData {
        if (!disabled && mod.icon != null)
            return BitmapData.fromBytes(ByteArrayData.fromBytes(mod.icon));

        if (disabled && FileUtilSandboxed.fileExists("mods/" + mod.title + "/_polymod_icon.png"))
            return BitmapData.fromFile("mods/" + mod.title + "/_polymod_icon.png");

        return Assets.getBitmapData(FlxG.random.bool(5) ? "flixel/images/logo/default.png" : Paths.image("modmenu/default_icon"));
    }
    /// Handler methods
    function handleDependencies(dependencies, removeState:Bool) {
        if (dependencies.dependencies != null) {
            var depFields = ReflectUtil.getFieldsOf(dependencies.dependencies);
            for (depName in depFields) {
                modStates.set(depName, true);
                if (removeState) modStates.remove(depName);
                trace(modStates);
                trace(depName);
            }
        }
    }

    function handleDependents(modId:String, removeState:Bool) {
        for (mod in enabledMods.filter(meta -> meta.dependencies.exists(modId))) {
            modStates.set(mod.id, false);
            if (removeState) modStates.remove(mod.id);
            trace("Found dependents mods: " + mod.id);
            trace(mod.id);
        }

        for (mod in enabledMods.filter(meta -> meta.optionalDependencies.exists(modId))) {
            modStates.set(mod.id, false);
            if (removeState) modStates.remove(mod.id);
            trace("Found optional dependents mods: " + mod.id);
            trace(mod.id);
        }
    }

    /// Update Methods
    function updateModsSizeText(searchFilter:String = "") {
        if (searchFilter == "") {
            modsTxt.text = "Showing " + totalMods + " mods";
            if (disabledMods.length > 0) disModsTxt.text = "(+" + disabledMods.length + " disabled)";
        } else {
            // Count filtered disabled mods for display
            var filteredDisabledCount = 0;
            for (modId in disabledMods) {
                if (modId.toLowerCase().indexOf(searchFilter.toLowerCase()) != -1) {
                    filteredDisabledCount++;
                }
            }

            modsTxt.text = "Showing " + getFilteredModCount(searchFilter) + " of " + totalMods + " mods";
            if (filteredDisabledCount > 0) disModsTxt.text = "(+" + filteredDisabledCount + " disabled)";
        }
    }

    function updateButton(btn:Button, url:String) {
        btn.disabled = (url == null || url == "");
        if (!btn.disabled) btn.userData = url;
    }
    /// Filter methods
    function applySearchFilter(list:ListView, searchFilter:String) {
        var filter = searchFilter.toLowerCase();
        list.dataSource.filter((index:Int, item:Dynamic) -> {
            var modId:String = item.modId;
            return modId != null && modId.toLowerCase().indexOf(filter) != -1;
        });
    }

    function getFilteredModCount(searchFilter:String):Int {
        if (searchFilter == "") return totalMods;

        // Let the dataSource handle the filtering and just get its size
        return modsListView.dataSource.size;
    }

    // Other
    override function onOpenSubStateComplete(targetState:FlxSubState):Void {
        super.onOpenSubStateComplete(targetState);
        modMenuCam.visible = false;
    }

    override function onCloseSubStateComplete(targetState:FlxSubState):Void {
        super.onCloseSubStateComplete(targetState);
        FlxG.state.camera.filters = [new ShaderFilter(new GaussianBlurShader(1))];
        modMenuCam.visible = true;
    }

    // Cleanup stuff
    override function close() {
        refreshModStates();
        cleanup();
        super.close();
    }

    override function destroy() {
        cleanup();
        super.destroy();
    }

    function cleanup() {
        if (modMenuCam != null) FlxG.cameras.remove(modMenuCam);
        if (FlxG.state.camera.filters != null) FlxG.state.camera.filters.remove(FlxG.state.camera.filters[FlxG.state.camera.filters.length - 1]);
        FlxG.state.persistentUpdate = prevPersUpd;
        if (prevCursor == false) Cursor.hide();
    }

    function refreshModStates() {
        if (!modStates.keys().hasNext()) return;

        for (mod in modStates.keyValueIterator()) {
            var currentFile = mod.value ? "_polymod_meta_disabled.json" : "_polymod_meta.json";
            var targetFile = mod.value ? "_polymod_meta.json" : "_polymod_meta_disabled.json";
            var modPath = "mods/" + mod.key + "/" + currentFile;
            FileUtilSandboxed.rename(modPath, targetFile);
        }

        PolymodHandler.forceReloadAssets();
    }
}